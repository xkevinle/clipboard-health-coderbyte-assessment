const { deterministicPartitionKey } = require("./dpk");

describe("deterministicPartitionKey", () => {
  it("Returns the literal '0' when given no input", () => {
    const trivialKey = deterministicPartitionKey();
    expect(trivialKey).toBe("0");
  });

  // test case: pure function test since same input should return same output
  it("Returns trivial key that always returns the same output given the same input", () => {
    const trivialKey = deterministicPartitionKey(1);
    const trivialKeyCopy = deterministicPartitionKey(1);
    expect(trivialKey).toEqual(trivialKeyCopy);
  });

  // test case: if the partition key length is greater than the max partition key length
  it("Partition key input length greater than 256 characters should not equal to deterministicPartitionKey", () => {
    const overLimit = '????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????';
    const trivialKey = deterministicPartitionKey({partitionKey: overLimit });
    expect(trivialKey).not.toEqual(overLimit);
  });

  // test case: check if a non string input is stringified
  it("String type input should not equal number type input", () => {
    const trivialKey = deterministicPartitionKey('1');
    const trivialKeyCopy = deterministicPartitionKey(1);
    expect(trivialKey).not.toEqual(trivialKeyCopy);
  });
});
